// delete_job_slice.ts
import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { deleteJob, DeleteJobResponse, ErrorResponse } from "./delete_job_thunk"; // Import types and thunk

// Interface for the overall delete job state
interface DeleteJobState {
  message: string | null; // Stores the success message from the API
  loading: boolean;
  error: string | null;
  success: boolean;
}

// Initial state for the delete job slice
const initialState: DeleteJobState = {
  message: null,
  loading: false,
  error: null,
  success: false,
};

// Create the delete job Redux slice
const deleteJobSlice = createSlice({
  name: "delete_job", // Slice name
  initialState, // Initial state
  reducers: {
    // Reducer to reset the state to its initial values
    resetDeleteJobState: () => initialState,
  },
  extraReducers: (builder) => {
    builder
      // Handle pending state of deleteJob thunk
      .addCase(deleteJob.pending, (state) => {
        state.loading = true; // Set loading to true
        state.error = null; // Clear any previous errors
        state.success = false; // Set success to false
        state.message = null; // Clear any previous success messages
      })
      // Handle fulfilled state of deleteJob thunk
      .addCase(
        deleteJob.fulfilled,
        (state, action: PayloadAction<DeleteJobResponse>) => {
          state.loading = false; // Set loading to false
          state.success = action.payload.success; // Set success based on API response
          state.message = action.payload.message; // Store the success message
          state.error = null; // Ensure error is null on success
        }
      )
      // Handle rejected state of deleteJob thunk
      .addCase(deleteJob.rejected, (state, action) => {
        state.loading = false; // Set loading to false
        // Set error message from payload or a default message
        state.error = action.payload?.message || "Failed to delete job";
        state.success = false; // Set success to false
        state.message = null; // Clear message on failure
      });
  },
});

// Export actions generated by createSlice
export const { resetDeleteJobState } = deleteJobSlice.actions;

// Export the reducer
export default deleteJobSlice.reducer;

// Selector to easily access the success message from the Redux store
export const selectDeleteJobMessage = (state: { deletejob: DeleteJobState }) =>
  state.deletejob.message;

// Selector to easily access the loading state
export const selectDeleteJobLoading = (state: { deletejob: DeleteJobState }) =>
  state.deletejob.loading;

// Selector to easily access the error state
export const selectDeleteJobError = (state: { deletejob: DeleteJobState }) =>
  state.deletejob.error;

// Selector to easily access the success state
export const selectDeleteJobSuccess = (state: { deletejob: DeleteJobState }) =>
  state.deletejob.success;
