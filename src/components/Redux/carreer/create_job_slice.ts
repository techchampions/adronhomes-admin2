// create_job_slice.ts
import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { createJob, CreateJobResponse, ErrorResponse } from "./create_job_thunk"; // Import types and thunk
import { JobListing } from "./job_details_thunk"; // Re-using JobListing interface for the created job

// Interface for the overall create job state
interface CreateJobState {
  jobCreated: JobListing | null; // Stores the details of the newly created job
  loading: boolean;
  error: string | null;
  success: boolean;
  message:any
}

// Initial state for the create job slice
const initialState: CreateJobState = {
  jobCreated: null,
  loading: false,
  error: null,
  success: false,
  message:null
};

// Create the create job Redux slice
const createJobSlice = createSlice({
  name: "create_job", // Slice name
  initialState, // Initial state
  reducers: {
    // Reducer to reset the state to its initial values
    resetCreateJobState: () => initialState,
  },
  extraReducers: (builder) => {
    builder
      // Handle pending state of createJob thunk
      .addCase(createJob.pending, (state) => {
        state.loading = true; // Set loading to true
        state.error = null; // Clear any previous errors
        state.success = false; // Set success to false
        state.jobCreated = null; // Clear previously created job data
    state.message=null
      })
      // Handle fulfilled state of createJob thunk
      .addCase(
        createJob.fulfilled,
        (state, action: PayloadAction<CreateJobResponse>) => {
          state.loading = false; // Set loading to false
          state.success = action.payload.success; // Set success based on API response
          state.jobCreated = action.payload.job; // Store the details of the created job
          state.error = null; // Ensure error is null on success
          state.message=action.payload.message
        }
      )
      // Handle rejected state of createJob thunk
      .addCase(createJob.rejected, (state, action) => {
        state.loading = false; // Set loading to false
        // Set error message from payload or a default message
        state.error = action.payload?.message || "Failed to create job";
        state.success = false; // Set success to false
        state.jobCreated = null; // Clear job data on failure
      });
  },
});

// Export actions generated by createSlice
export const { resetCreateJobState } = createJobSlice.actions;

// Export the reducer
export default createJobSlice.reducer;

// Selector to easily access the created job data from the Redux store
export const selectCreatedJob = (state: { createjob: CreateJobState }) =>
  state.createjob.jobCreated;

// Selector to easily access the loading state
export const selectCreateJobLoading = (state: { createjob: CreateJobState }) =>
  state.createjob.loading;

// Selector to easily access the error state
export const selectCreateJobError = (state: { createjob: CreateJobState }) =>
  state.createjob.error;

// Selector to easily access the success state
export const selectCreateJobSuccess = (state: { createjob: CreateJobState }) =>
  state.createjob.success;
