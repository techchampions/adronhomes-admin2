// edit_job_slice.ts
import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { editJob, EditJobResponse, ErrorResponse } from "./edit_job_thunk"; // Import types and thunk
import { JobListing } from "./job_details_thunk"; // Re-using JobListing interface for the updated job

// Interface for the overall edit job state
interface EditJobState {
  jobEdited: JobListing | null; // Stores the details of the newly edited job
  loading: boolean;
  error: string | null;
  success: boolean;
    message:any
}


// Initial state for the edit job slice
const initialState: EditJobState = {
  jobEdited: null,
  loading: false,
  error: null,
  success: false,
    message:null
};

// Create the edit job Redux slice
const editJobSlice = createSlice({
  name: "edit_job", // Slice name
  initialState, // Initial state
  reducers: {
    // Reducer to reset the state to its initial values
    resetEditJobState: () => initialState,
  },
  extraReducers: (builder) => {
    builder
      // Handle pending state of editJob thunk
      .addCase(editJob.pending, (state) => {
        state.loading = true; 
        state.error = null; 
        state.success = false;
        state.jobEdited = null;
           state.message=null

      })
      // Handle fulfilled state of editJob thunk
      .addCase(
        editJob.fulfilled,
        (state, action: PayloadAction<EditJobResponse>) => {
          state.loading = false; 
          state.success = action.payload.success; // Set success based on API response
          state.jobEdited = action.payload.job; // Store the details of the edited job
          state.error = null; // Ensure error is null on success
                    state.message=action.payload.message
        }
      )
      // Handle rejected state of editJob thunk
      .addCase(editJob.rejected, (state, action) => {
        state.loading = false; // Set loading to false
        // Set error message from payload or a default message
        state.error = action.payload?.message || "Failed to update job";
        state.success = false; // Set success to false
        state.jobEdited = null; // Clear job data on failure
      });
  },
});

// Export actions generated by createSlice
export const { resetEditJobState } = editJobSlice.actions;

// Export the reducer
export default editJobSlice.reducer;

// Selector to easily access the edited job data from the Redux store
export const selectEditedJob = (state: { editjob: EditJobState }) =>
  state.editjob.jobEdited;

// Selector to easily access the loading state
export const selectEditJobLoading = (state: { editjob: EditJobState }) =>
  state.editjob.loading;

// Selector to easily access the error state
export const selectEditJobError = (state: { editjob: EditJobState }) =>
  state.editjob.error;

// Selector to easily access the success state
export const selectEditJobSuccess = (state: { editjob: EditJobState }) =>
  state.editjob.success;
