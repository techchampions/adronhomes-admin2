// job_details_slice.ts
import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import {
  fetchJobDetailsById,
  JobListing,
  ApplicationsData,
  JobDetailsResponse,
} from "./job_details_thunk"; // Import types and thunk

// Interface for pagination data within the state for applications
interface ApplicationPagination {
  currentPage: number;
  perPage: number;
  totalItems: number;
  totalPages: number;
}

// Interface for the overall job details state
interface JobDetailsState {
  jobListing: JobListing | null; // Stores the detailed job listing object
  totalCareerViews: number | null;
  totalApplications: number | null;
  applications: ApplicationsData | null; // Stores the paginated applications data
  loading: boolean;
  error: string | null;
  success: boolean;
  applicationPagination: ApplicationPagination;
}

// Initial state for the job details slice
const initialState: JobDetailsState = {
  jobListing: null,
  totalCareerViews: null,
  totalApplications: null,
  applications: null,
  loading: false,
  error: null,
  success: false,
  applicationPagination: {
    currentPage: 1,
    perPage: 10,
    totalItems: 0,
    totalPages: 1,
  },
};

// Create the job details Redux slice
const jobDetailsSlice = createSlice({
  name: "job_details", // Slice name
  initialState, // Initial state
  reducers: {
    // Reducer to reset the state to its initial values
    resetJobDetailsState: () => initialState,
    // Reducer to set the current page for applications pagination
    setApplicationCurrentPage: (state, action: PayloadAction<number>) => {
      if (state.applications) {
        state.applications.current_page = action.payload;
      }
      state.applicationPagination.currentPage = action.payload;
    },
  },
  extraReducers: (builder) => {
    builder
      // Handle pending state of fetchJobDetailsById thunk
      .addCase(fetchJobDetailsById.pending, (state) => {
        state.loading = true; // Set loading to true
        state.error = null; // Clear any previous errors
        state.success = false; // Set success to false
      })
      // Handle fulfilled state of fetchJobDetailsById thunk
      .addCase(
        fetchJobDetailsById.fulfilled,
        (state, action: PayloadAction<JobDetailsResponse>) => {
          state.loading = false; // Set loading to false
          state.success = action.payload.success; // Set success based on API response
          state.jobListing = action.payload.job_list; // Store the detailed job listing
          state.totalCareerViews = action.payload.total_career_views; // Store total career views
          state.totalApplications = action.payload.total_applications; // Store total applications
          state.applications = action.payload.applications; // Store the applications data

          // Update applications pagination details from the API response
          state.applicationPagination = {
            currentPage: action.payload.applications.current_page,
            perPage: action.payload.applications.per_page,
            totalItems: action.payload.applications.total,
            totalPages: action.payload.applications.last_page,
          };
        }
      )
      // Handle rejected state of fetchJobDetailsById thunk
      .addCase(fetchJobDetailsById.rejected, (state, action) => {
        state.loading = false; // Set loading to false
        // Set error message from payload or a default message
        state.error = action.payload?.message || "Failed to fetch job details";
        state.success = false; // Set success to false
      });
  },
});

// Export actions generated by createSlice
export const { resetJobDetailsState, setApplicationCurrentPage } = jobDetailsSlice.actions;

// Export the reducer
export default jobDetailsSlice.reducer;

// Selector to easily access the job listing data from the Redux store
export const selectJobListing = (state: { getjobdetails: JobDetailsState }) =>
  state.getjobdetails.jobListing;

// Selector to easily access the total career views for this job
export const selectJobTotalCareerViews = (state: { getjobdetails: JobDetailsState }) =>
  state.getjobdetails.totalCareerViews;

// Selector to easily access the total applications for this job
export const selectJobTotalApplications = (state: { getjobdetails: JobDetailsState }) =>
  state.getjobdetails.totalApplications;

// Selector to easily access the applications data for this job
export const selectApplicationsData = (state: { getjobdetails: JobDetailsState }) =>
  state.getjobdetails.applications?.data;

// Selector to easily access the applications pagination data
export const selectApplicationPagination = (state: { getjobdetails: JobDetailsState }) =>
  state.getjobdetails.applicationPagination;
